),
columnDefs = list(list(searchable = TRUE, targets = "_all")), # Hacer todas las columnas filtrables
search = list(search = ""), # Inicial sin filtros
searchCols = NULL # Sin filtros iniciales, pero ajustable si deseas valores predeterminados
),
filter = 'top' # Habilitar filtros en el encabezado
)
}, server = TRUE)
}
ui <- fluidPage(
tags$style(
HTML("
.dataTables_wrapper .dataTables_filter input {
border: 1px solid #ddd;
padding: 5px;
border-radius: 4px;
}
.dataTables_wrapper .dataTables_paginate .paginate_button {
background: #f4f4f4;
color: #333;
border: none;
padding: 5px 10px;
margin: 2px;
border-radius: 4px;
}
")
),
titlePanel("Registro de patentes (2009 - 2024)"),
DTOutput("tabla_patentes")
)
# Ejecutar la aplicación
shinyApp(ui, server)
# UI de la aplicación
ui <- fluidPage(
includeCSS("styles.css"),
titlePanel("Registro de patentes (2009 - 2024)"), # Título actualizado
DTOutput("tabla_patentes")
)
# Servidor de la aplicación
server <- function(input, output, session) {
# DataTable con procesamiento en servidor y filtros
output$tabla_patentes <- renderDT({
datatable(
patentes_clean,
options = list(
pageLength = 10,          # Número de filas por página
server = TRUE,            # Procesamiento en servidor
scrollX = TRUE,           # Habilitar desplazamiento horizontal
autoWidth = TRUE,         # Ajustar automáticamente el ancho de columnas
dom = 'Bfrtip',           # Interfaz con botones y filtros
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(list(searchable = TRUE, targets = "_all")), # Hacer todas las columnas filtrables
search = list(search = ""), # Inicial sin filtros
searchCols = NULL # Sin filtros iniciales, pero ajustable si deseas valores predeterminados
),
filter = 'top' # Habilitar filtros en el encabezado
)
}, server = TRUE)
}
ui <- fluidPage(
tags$style(
HTML("
.dataTables_wrapper .dataTables_filter input {
border: 1px solid #ddd;
padding: 5px;
border-radius: 4px;
}
.dataTables_wrapper .dataTables_paginate .paginate_button {
background: #f4f4f4;
color: #333;
border: none;
padding: 5px 10px;
margin: 2px;
border-radius: 4px;
}
")
),
titlePanel("Registro de patentes (2009 - 2024)"),
DTOutput("tabla_patentes")
)
# Ejecutar la aplicación
shinyApp(ui, server)
datatable(
patentes_clean,
options = list(
pageLength = 10,            # Mostrar 10 filas por página
autoWidth = TRUE,           # Ajustar el ancho de las columnas automáticamente
scrollX = TRUE,             # Habilitar desplazamiento horizontal si es necesario
dom = 'Bfrtip',             # Habilitar botones, filtros y paginación
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Botones de exportación
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(list(className = 'dt-center', targets = "_all")), # Centrar columnas
filter = "top"                 # Habilitar filtros por columna
),
rownames = FALSE,                # Deshabilitar números de fila
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
"Registro de patentes (2009 - 2024)" # Título de la tabla
)
)
datatable(
patentes_clean,
options = list(
pageLength = 10,            # Mostrar 10 filas por página
autoWidth = TRUE,           # Ajustar el ancho de las columnas automáticamente
scrollX = TRUE,             # Habilitar desplazamiento horizontal si es necesario
dom = 'Bfrtip',             # Habilitar botones, filtros y paginación
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Botones de exportación
columnDefs = list(list(className = 'dt-center', targets = "_all")), # Centrar columnas
filter = "top"                 # Habilitar filtros por columna
),
rownames = FALSE,                # Deshabilitar números de fila
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
"Registro de patentes (2009 - 2024)" # Título de la tabla
)
)
datatable(
patentes_clean,
options = list(
pageLength = 10,            # Mostrar 10 filas por página
autoWidth = TRUE,           # Ajustar el ancho de las columnas automáticamente
scrollX = TRUE,             # Habilitar desplazamiento horizontal si es necesario
dom = 'Bfrtip',             # Habilitar botones, filtros y paginación
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Botones de exportación
columnDefs = list(list(className = 'dt-center', targets = "_all")), # Centrar columnas
order = list(list(0, 'desc')), # Ordenar por la primera columna en orden descendente
searchCols = NULL,          # Sin filtros iniciales, ajustable si quieres valores predeterminados
filter = 'top'              # Habilitar filtros por columna en la parte superior
),
rownames = FALSE,                # Deshabilitar números de fila
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
"Registro de patentes (2009 - 2024)" # Título de la tabla
)
)
patentes <- read_excel("2024 11 14 patentes 2009_2024.xlsx", sheet = "solicitadas") %>%
clean_names()
patentes_clean <- patentes %>%
rename(
`Número de Aplicación` = application_number,
`Título` = title,
`Solicitante` = applicants,
`Fecha de Presentación` = filing_date,
`Fecha de Publicación` = publication_date,
`Fecha de Registro` = registration_date,
`Estado` = status,
`País` = country,
`Tipo` = type_name,
`Año de Publicación` = ano_publicacion
) %>%
arrange(desc(`Fecha de Publicación`))
datatable(
patentes_clean,
options = list(
pageLength = 10,            # Mostrar 10 filas por página
autoWidth = TRUE,           # Ajustar el ancho de las columnas automáticamente
scrollX = TRUE,             # Habilitar desplazamiento horizontal si es necesario
dom = 'Bfrtip',             # Habilitar botones, filtros y paginación
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Botones de exportación
columnDefs = list(list(className = 'dt-center', targets = "_all")), # Centrar columnas
filter = "top"                 # Habilitar filtros por columna
),
rownames = FALSE,                # Deshabilitar números de fila
caption = htmltools::tags$caption(
style = 'caption-side: top; text-align: center; font-size: 16px; font-weight: bold;',
"Registro de patentes (2009 - 2024)" # Título de la tabla
)
)
knitr::opts_chunk$set(echo = TRUE)
# Mostrar la DataTable con las modificaciones solicitadas
datatable(patentes_clean, options = list(
pageLength = 5,          # Mostrar solo las 5 primeras filas
scrollX = TRUE,          # Habilitar desplazamiento horizontal
autoWidth = TRUE,        # Ajustar automáticamente el ancho de las columnas
dom = 'Bfrtip',          # Interfaz con botones y filtros
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'), # Habilitar botones de exportación
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(
list(searchable = TRUE, targets = "_all")  # Hacer todas las columnas filtrables
)
), filter = 'top')  # Habilitar filtros en las columnas
# Mostrar la DataTable con las modificaciones solicitadas
datatable(patentes_clean,
options = list(
pageLength = 5,           # Mostrar solo las 5 primeras filas
scrollX = TRUE,          # Habilitar desplazamiento horizontal
autoWidth = TRUE,        # Ajustar automáticamente el ancho de las columnas
dom = 'Bfrtip',          # Interfaz con botones y filtros
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Habilitar botones de exportación
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(
list(searchable = TRUE, targets = "_all")  # Hacer todas las columnas filtrables
)
),
filter = 'top' # Filtros por columnas
) %>%
htmltools::tagList(
tags$h3("Registro de Patentes (2009 - 2024)", align = "center")  # Título en la parte superior
)
# Mostrar la DataTable con las modificaciones solicitadas
datatable(patentes_clean,
options = list(
pageLength = 5,           # Mostrar solo las 5 primeras filas
scrollX = TRUE,          # Habilitar desplazamiento horizontal
autoWidth = TRUE,        # Ajustar automáticamente el ancho de las columnas
dom = 'Bfrtip',          # Interfaz con botones y filtros
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Habilitar botones de exportación
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(
list(searchable = TRUE, targets = "_all")  # Hacer todas las columnas filtrables
)
),
filter = 'top' # Filtros por columnas
) %>%
# Mostrar la DataTable con las modificaciones solicitadas
datatable(patentes_clean,
options = list(
pageLength = 5,           # Mostrar solo las 5 primeras filas
scrollX = TRUE,          # Habilitar desplazamiento horizontal
autoWidth = TRUE,        # Ajustar automáticamente el ancho de las columnas
dom = 'Bfrtip',          # Interfaz con botones y filtros
buttons = c('copy', 'csv', 'excel', 'pdf', 'print'),  # Habilitar botones de exportación
initComplete = JS(
"function(settings, json) {",
"$(this.api().table().header()).css({'background-color': '#f4f4f4', 'color': '#333'});",
"}"
),
columnDefs = list(
list(searchable = TRUE, targets = "_all")  # Hacer todas las columnas filtrables
)
),
filter = 'top' # Filtros por columnas
)
knitr::opts_chunk$set(echo = TRUE)
# Cargar librerías necesarias
library(knitr)
library(kableExtra)
library(tidyverse)
library(DT)
library(janitor)
library(readxl)
library(shiny)
unique(patentes$country)
unique(patentes$status)
# Asumir que ya tienes el marco de datos 'patentes' con la columna 'country'
# Crear la variable 'continente' basada en los valores de la columna 'country'
patentes$continente <- dplyr::case_when(
patentes$country %in% c('REINO UNIDO', 'ITALIA', 'SUIZA', 'NORUEGA', 'ALEMANIA', 'ESPAÑA', 'PAISES BAJOS',
'SUECIA', 'DINAMARCA', 'BELGICA', 'FRANCIA', 'AUSTRIA', 'PORTUGAL', 'IRLANDA',
'LUXEMBURGO', 'FINLANDIA', 'HOLANDA', 'POLONIA', 'ISLANDIA', 'LETONIA', 'GIBRALTAR',
'CROACIA', 'MALTA', 'MONACO', 'REPUBLICA CHECA', 'CHIPRE', 'ISLAS FEROE', 'ESLOVAQUIA',
'ANDORRA', 'JERSEY', 'ESLOVENIA', 'GUERNSEY', 'MARRUECOS', 'ESTONIA', 'SINGAPUR',
'GRECIA', 'SAN MARINO', 'MAURICIO', 'SEYCHELLES', 'AZERBAIYAN', 'GUATEMALA', 'VENEZUELA',
'REP. DEMOCRATICA DEL CONGO', 'BULGARIA', 'PARAGUAY', 'UCRANIA', 'ALBANIA'),
"Europa",
patentes$country %in% c('ESTADOS UNIDOS DE AMERICA', 'CANADA', 'MEXICO', 'PANAMA', 'PUERTO RICO', 'BAHAMAS',
'BERMUDA', 'CUBA', 'ISLAS VIRGENES BRITANICAS', 'GUATEMALA', 'HONG KONG', 'ANTILLAS HOLANDESAS',
'ISLAS CAIMAN', 'SAN KITTS Y NEVIS', 'QATAR', 'SAINT KITTS Y NEVIS'),
"América del Norte",
patentes$country %in% c('INDIA', 'CHINA', 'JAPON', 'TAIWAN, PROVINCIA DE CHINA', 'ISRAEL', 'IRAN', 'SINGAPUR',
'MALASIA', 'FILIPINAS', 'TAILANDIA', 'VIETNAM', 'COREA DEL SUR', 'PAKISTAN', 'BANGLADESH',
'AFGANISTAN', 'NEPAL', 'LANKA', 'INDONESIA', 'COREA DEL NORTE', 'LÍBANO', 'OMAN', 'LAOS'),
"Asia",
patentes$country %in% c('CHILE', 'ARGENTINA', 'BRASIL', 'COLOMBIA', 'PERU', 'ECUADOR', 'BOLIVIA', 'URUGUAY',
'PARAGUAY'),
"América del Sur",
patentes$country %in% c('AUSTRALIA', 'NUEVA ZELANDA', 'PAPUA NUEVA GUINEA', 'FIDJI', 'SOMOA', 'VANUATU',
'ISLAS COOK', 'MICRONESIA', 'PALAU', 'HONG KONG'),
"Oceanía",
patentes$country %in% c('SUDAFRICA', 'EGIPTO', 'KENIA', 'MARRUECOS', 'NÍGER', 'ZAMBIA', 'GHANA', 'ANGOLA',
'BOTSWANA', 'MAURICIO', 'ZIMBABWE', 'TUNEZ', 'NAMIBIA', 'MALI', 'ALGERIA'),
"África",
TRUE ~ "Desconocido"  # Para cualquier país no listado
)
library(dplyr)
# Crear la columna 'continente' basada en la columna 'country'
patentes <- patentes %>%
mutate(continente = case_when(
country %in% c('REINO UNIDO', 'ITALIA', 'SUIZA', 'NORUEGA', 'ALEMANIA', 'ESPAÑA', 'PAISES BAJOS',
'SUECIA', 'DINAMARCA', 'BELGICA', 'FRANCIA', 'AUSTRIA', 'PORTUGAL', 'IRLANDA',
'LUXEMBURGO', 'FINLANDIA', 'HOLANDA', 'POLONIA', 'ISLANDIA', 'LETONIA', 'GIBRALTAR',
'CROACIA', 'MALTA', 'MONACO', 'REPUBLICA CHECA', 'CHIPRE', 'ISLAS FEROE', 'ESLOVAQUIA',
'ANDORRA', 'JERSEY', 'ESLOVENIA', 'GUERNSEY', 'MARRUECOS', 'ESTONIA', 'SINGAPUR',
'GRECIA', 'SAN MARINO', 'MAURICIO', 'SEYCHELLES', 'AZERBAIYAN', 'GUATEMALA', 'VENEZUELA',
'REP. DEMOCRATICA DEL CONGO', 'BULGARIA', 'PARAGUAY', 'UCRANIA', 'ALBANIA')) ~ "Europa",
country %in% c('ESTADOS UNIDOS DE AMERICA', 'CANADA', 'MEXICO', 'PANAMA', 'PUERTO RICO', 'BAHAMAS',
'BERMUDA', 'CUBA', 'ISLAS VIRGENES BRITANICAS', 'GUATEMALA', 'HONG KONG', 'ANTILLAS HOLANDESAS',
'ISLAS CAIMAN', 'SAN KITTS Y NEVIS', 'QATAR', 'SAINT KITTS Y NEVIS') ~ "América del Norte",
country %in% c('INDIA', 'CHINA', 'JAPON', 'TAIWAN, PROVINCIA DE CHINA', 'ISRAEL', 'IRAN', 'SINGAPUR',
'MALASIA', 'FILIPINAS', 'TAILANDIA', 'VIETNAM', 'COREA DEL SUR', 'PAKISTAN', 'BANGLADESH',
'AFGANISTAN', 'NEPAL', 'LANKA', 'INDONESIA', 'COREA DEL NORTE', 'LÍBANO', 'OMAN', 'LAOS') ~ "Asia",
country %in% c('CHILE', 'ARGENTINA', 'BRASIL', 'COLOMBIA', 'PERU', 'ECUADOR', 'BOLIVIA', 'URUGUAY',
'PARAGUAY') ~ "América del Sur",
country %in% c('AUSTRALIA', 'NUEVA ZELANDA', 'PAPUA NUEVA GUINEA', 'FIDJI', 'SOMOA', 'VANUATU',
'ISLAS COOK', 'MICRONESIA', 'PALAU', 'HONG KONG') ~ "Oceanía",
country %in% c('SUDAFRICA', 'EGIPTO', 'KENIA', 'MARRUECOS', 'NÍGER', 'ZAMBIA', 'GHANA', 'ANGOLA',
'BOTSWANA', 'MAURICIO', 'ZIMBABWE', 'TUNEZ', 'NAMIBIA', 'MALI', 'ALGERIA') ~ "África",
TRUE ~ "Desconocido"  # Para cualquier país no listado
))
library(dplyr)
# Crear la columna 'continente' en el marco de datos 'patentes'
patentes <- patentes %>%
mutate(continente = case_when(
country %in% c("REINO UNIDO", "ITALIA", "SUIZA", "NORUEGA", "ALEMANIA", "ESPAÑA", "PAISES BAJOS",
"SUECIA", "SINGAPUR", "DINAMARCA", "BELGICA", "FRANCIA", "AUSTRIA", "PORTUGAL",
"IRLANDA", "LUXEMBURGO", "FINLANDIA", "POLONIA", "ISLANDIA", "LETONIA", "GIBRALTAR",
"GRECIA", "SAN MARINO", "MALTA", "MONACO", "EMIRATOS ARABES UNIDOS", "REPUBLICA CHECA",
"CHIPRE", "ESLOVENIA", "SEYCHELLES", "AZERBAIYAN", "GUERNSEY", "MARRUECOS", "ISLAS FEROE",
"ESTONIA") ~ "Europa",
country %in% c("ESTADOS UNIDOS DE AMERICA", "CANADA", "MEXICO", "PANAMA", "PUERTO RICO", "BERMUDA",
"CUBA", "ISLAS VIRGENES BRITANICAS", "GUATEMALA", "HONG KONG", "ANTILLAS HOLANDESAS",
"ISLAS CAIMAN", "SAN KITTS Y NEVIS", "QATAR", "BAHAMAS") ~ "América del Norte",
country %in% c("INDIA", "CHINA", "JAPON", "TAIWAN, PROVINCIA DE CHINA", "ISRAEL", "IRAN", "SINGAPUR",
"MALASIA", "FILIPINAS", "TAILANDIA", "VIETNAM", "REP. POPULAR DEMOCRAT. DE COREA",
"COREA DEL SUR", "PAKISTAN", "BANGLADESH", "AFGANISTAN", "NEPAL", "LANKA", "INDONESIA",
"COREA DEL NORTE", "LÍBANO", "OMAN", "LAOS") ~ "Asia",
country %in% c("CHILE", "ARGENTINA", "BRASIL", "COLOMBIA", "PERU", "ECUADOR", "BOLIVIA", "URUGUAY",
"PARAGUAY") ~ "América del Sur",
country %in% c("AUSTRALIA", "NUEVA ZELANDA") ~ "Oceanía",
country %in% c("SUDAFRICA", "EGIPTO", "KENIA", "MARRUECOS", "NÍGER", "ZAMBIA", "GHANA", "ANGOLA",
"BOTSWANA", "MAURICIO", "ZIMBABWE", "TUNEZ", "NAMIBIA", "MALI", "ALGERIA") ~ "África",
TRUE ~ "Desconocido"  # Para cualquier país no listado
))
# Ver el resultado
head(patentes)
View(patentes)
pantentes %>%
filter(continente = "Asia")
patentes %>%
filter(continente = "Asia")
patentes %>%
+      filter(continente == "Asia")
patentes %>%
filter(continente == "Asia")
patentes %>%
filter(continente == "Asia") %>%
select(country)
patentes %>%
filter(continente == "Asia") %>%
select(country) %>%
unique()
patentes %>%
filter(continente == "América del Sur") %>%
select(country) %>%
unique()
patentes
names(patentes)
View(patentes)
patentes$title
library(topicmodels)
library(tm)
library(tidytext)
# Preprocesamiento del texto
corpus <- Corpus(VectorSource(patentes$title))
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("es"))
# Convertir a una matriz de términos
dtm <- DocumentTermMatrix(corpus)
# Entrenar el modelo LDA con 3 temas
lda_model <- LDA(dtm, k = 3)  # Número de temas a extraer (k)
# Ver los temas generados
topics <- terms(lda_model, 10)  # Las 10 palabras más importantes de cada tema
topics
patentes <- read_excel("2024 11 14 patentes 2009_2024.xlsx", sheet = "solicitadas") %>%
janitor::clean_names() %>%
mutate(id = 1:n())
# Cargar librerías necesarias
library(knitr)
library(kableExtra)
library(tidyverse)
library(DT)
library(janitor)
library(readxl)
library(tm)
library(udpipe)
# Descargar y cargar el modelo de idioma
modelo_en <- udpipe::udpipe_download_model('spanish')
modelo_en$file_model
modelo_en <- udpipe_load_model(file = modelo_en$file_model)
# Anotar y filtrar las palabras por tipo y stopwords
titulos <- udpipe_annotate(
object = modelo_en,
x = patentes$title,
trace = 20
) %>% as.data.frame(.)
knitr::opts_chunk$set(echo = TRUE)
# Cargar librerías necesarias
library(knitr)
library(kableExtra)
library(tidyverse)
library(DT)
library(janitor)
library(readxl)
library(tm)
library(udpipe)
patentes <- read_excel("2024 11 14 patentes 2009_2024.xlsx", sheet = "solicitadas") %>%
janitor::clean_names() %>%
mutate(id = 1:n())
muestra <- patentes %>%
select(title) %>%
slice_sample(n = 10)
muestra
# Crear un Corpus de los textos
corpus <- Corpus(VectorSource(muestra$title))
# Preprocesamiento
corpus <- tm_map(corpus, content_transformer(tolower))  # Convertir a minúsculas
corpus <- tm_map(corpus, removePunctuation)             # Eliminar puntuaciones
corpus <- tm_map(corpus, removeNumbers)                 # Eliminar números
corpus <- tm_map(corpus, removeWords, stopwords("es"))  # Eliminar stopwords
# Continuar con el preprocesamiento: eliminar números, puntuación, etc.
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("es"))
# Crear el DocumentTermMatrix
corpus <- DocumentTermMatrix(corpus)
# Crear un Document-Term Matrix si es necesario para análisis posteriores
dtm <- DocumentTermMatrix(corpus)
print(dtm)
colSums(as.matrix(dtm))
# Elige el número de tópicos
num_topics <- 5  # por ejemplo, 5 tópicos
# Entrenar el modelo LDA
lda_model <- LDA(dtm, k = num_topics, control = list(seed = 1234))
# Descargar y cargar el modelo de idioma
modelo_en <- udpipe::udpipe_download_model('spanish')
modelo_en$file_model
modelo_en <- udpipe_load_model(file = modelo_en$file_model)
# Anotar y filtrar las palabras por tipo y stopwords
titulos <- udpipe_annotate(
object = modelo_en,
x = muestra$title,
trace = 20
) %>% as.data.frame(.)
View(titulos)
titulos %>%
slice(1:20) %>% # selecciona las primeras 20 filas del dataframe
select(token, lemma, upos, xpos, feats)
titulos %>%
slice(1:30) %>% # selecciona las primeras 20 filas del dataframe
select(token, lemma, upos, xpos, feats)
titulos %>%
filter(upos %in% c("ADJ", "NOUN")) %>%  # Filtramos por adjetivos y sustantivos
select(doc_id, lemma) %>%  # Seleccionamos solo las columnas necesarias
filter(!lemma %in% stopwords::stopwords(language = "es")) %>%  # Excluimos stopwords
filter(!grepl("\\bVERB\\b", lemma, ignore.case = TRUE))
muestra <- patentes %>%
select(title) %>%
slice_sample(n = 1000)
# pull(title) # Almacena los valores -en este caso nombre de patentes- de la columna title en un vector
# Anotar y filtrar las palabras por tipo y stopwords
titulos <- udpipe_annotate(
object = modelo_en,
x = muestra$title,
trace = 20
) %>% as.data.frame(.)
titulos %>%
filter(upos %in% c("ADJ", "NOUN")) %>%  # Filtramos por adjetivos y sustantivos
select(doc_id, lemma) %>%  # Seleccionamos solo las columnas necesarias
filter(!lemma %in% stopwords::stopwords(language = "es")) %>%  # Excluimos stopwords
filter(!grepl("\\bVERB\\b", lemma, ignore.case = TRUE)) %>%
view()
filtrado <- titulos %>%
filter(upos %in% c("ADJ", "NOUN")) %>%  # Filtramos por adjetivos y sustantivos
select(doc_id, lemma) %>%  # Seleccionamos solo las columnas necesarias
filter(!lemma %in% stopwords::stopwords(language = "es")) %>%  # Excluimos stopwords
filter(!grepl("\\bVERB\\b", lemma, ignore.case = TRUE))
filtrado_dtm <- filtrado %>%
count(doc_id, lemma, sort = TRUE) %>% # contamos palabras x documento
cast_dtm(doc_id, lemma, n)
library(topicmodels)
filtrado_dtm <- filtrado %>%
count(doc_id, lemma, sort = TRUE) %>% # contamos palabras x documento
cast_dtm(doc_id, lemma, n)
library(quanteda)
library(reshape2)
library(tidytext)
filtrado_dtm <- filtrado %>%
count(doc_id, lemma, sort = TRUE) %>% # contamos palabras x documento
cast_dtm(doc_id, lemma, n)
filtrado_dtm
# Número de tópicos
num.topics <- 4
# Ejecutar el modelo LDA
modelo_lda <- LDA(filtrado_dtm, k = num.topics, method = "Gibbs")
# Ver los términos más relevantes para cada tópico
terminos_topicos <- terms(modelo_lda, 20)
print(terminos_topicos)
